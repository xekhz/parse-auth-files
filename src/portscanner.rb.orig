require 'celluloid'
require 'socket'
require 'timeout'
include Socket::Constants

class ScanPort
  include Celluloid

  #Metodo construtor
  #recebe porto de inicio e porto de fim
  def initialize(start_port, end_port, host)
    @start_port = start_port
    @end_port = end_port
    @host = host
    @open_ports = Array.new
  end

  #Executa o portscaner
  def run
    until @start_port == @end_port do
      scan @start_port
      @start_port += 1
    end
   end

   #Retorna a lista de portos abertos
  def get_open_ports()
    return @open_ports
  end
  
  #Executa o scan do porto em causa
  def scan(port) 
    begin 
      Timeout.timeout(10) do
        begin  
          ##sock = Socket.new(:INET, :STREAM)        #build the socket
          sock = Socket.new( AF_INET, SOCK_STREAM)
          ##raw = Socket.sockaddr_in(port, @host)
          raw = Socket.pack_sockaddr_in(port, @host)
          Debugger.debug("#{@host} a testar porto: #{port}",2) 
          #if sock.connect(raw)
          @open_ports << port if sock.connect(raw)
          rescue
            if sock != nil
              sock.close
            end
        end
    end
    rescue Timeout::Error
      Debugger.debug("expirou o tempo",3)      
    end
  end

  
private :scan
public :get_open_ports, :run
  
end

def main
  host = ARGV[0]
  start_port = ARGV[1].to_i
  end_port = ARGV[2].to_i
  open_ports_list = Array.new
  segment_size = 100

  until start_port >= end_port do
  sp = ScanPort.new start_port, start_port + segment_size, host
  sp.async.run
   if (sp.get_open_ports.size > 0) then
      #p sp.get_open_ports
      open_ports_list = open_ports_list + sp.get_open_ports
    end  
  start_port += segment_size
  # thread de segment_size em segment_size
  end
  p open_ports_list
end

#main
